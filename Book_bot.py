import telebot
import sqlite3
from telebot import types

bot = telebot.TeleBot('6857076342:AAGaUJyUy0xRpLcisIWIcxDRE2TLA9lngAs')
log = None
U = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
B = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è id –∫–Ω–∏–≥–∏


@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('library.sql')  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cur = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    cur.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        login TEXT NOT NULL,
        password TEXT NOT NULL,
        email TEXT,
        birthdate DATA
    )
    ''')
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ö–Ω–∏–≥–∏
    cur.execute('''
    CREATE TABLE IF NOT EXISTS books (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        author TEXT NOT NULL,
        description TEXT,
        year INTEGER,
        publisher TEXT,
        age_limit INTEGER NOT NULL,
        translator TEXT
    )
    ''')
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ë—Ä–æ–Ω–∏
    cur.execute('''
    CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        book_id INTEGER,
        booking_date TEXT DEFAULT CURRENT_TIMESTAMP,
        address TEXT,
        FOREIGN KEY(user_id) REFERENCES users(id),
        FOREIGN KEY(book_id) REFERENCES books(id)
    )
    ''')
    conn.commit()
    cur.close()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–¥
    conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìù")
    item2 = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üìú")
    markup.row(item1, item2)
    bot.send_message(message.chat.id, "üñê –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥–æ—Ä–æ–≥–æ–π –ø—É—Ç–Ω–∏–∫! –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω–∞—à–µ–π –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìù")
def registration(message):
    bot.send_message(message.chat.id, 'ü§ì –û, —Ç–∞–∫ –≤—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π? –°–µ–π—á–∞—Å –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è - ')
    bot.register_next_step_handler(message, user_log)


@bot.message_handler(func=lambda message: message.text == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üìú") #–ø–æ—Ñ–∏–∫—Å–∏—Ç—å
def authorization(message):
    bot.send_message(message.chat.id, 'ü•∞ –í—ã —Å–Ω–æ–≤–∞ –∑–¥–µ—Å—å, —Å—Ç–∞—Ä–∏–Ω–∞? –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - ')
    bot.register_next_step_handler(message, user_login_auth)


def user_log(message):  # –∑–∞–Ω–æ—Å–∏–º –∏–º—è
    global log
    log = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å - ')
    bot.register_next_step_handler(message, user_pas)


def user_pas(message):  # –∑–∞–Ω–æ—Å–∏–º –ø–∞—Ä–æ–ª—å –∏ –≤–Ω–æ—Å–∏–º –∏–º—è –∏ –ø–∞—Ä–æ–ª—å –≤ –±–¥

    global U  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    pas = message.text.strip()

    conn = sqlite3.connect('library.sql')
    cur = conn.cursor()

    cur.execute("INSERT INTO users (login, password) VALUES ('%s', '%s')" % (log, pas))

    cur.execute("SELECT id FROM users WHERE login=?", (log,))
    user_id = cur.fetchone()

    U = user_id[0]  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π U

    conn.commit()
    cur.close()
    conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É üìî")
    item2 = types.KeyboardButton("–í–∞—à–∏ –±—Ä–æ–Ω–∏ üë©‚Äçüíª")

    markup.add(item1, item2)
    bot.send_message(message.chat.id, 'üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


def user_login_auth(message):
   global log
   log = message.text.strip()
   bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å -')
   bot.register_next_step_handler(message, user_pass_auth)


def user_pass_auth(message):
    global U

    password = message.text.strip()

    conn = sqlite3.connect('library.sql')
    cur = conn.cursor()

    cur.execute("SELECT id FROM users WHERE login=? AND password=?", (log, password))
    user_id = cur.fetchone()

    if user_id:
        U = user_id[0]
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {log}!")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_open = types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É üìî")
        item_bookings = types.KeyboardButton("–í–∞—à–∏ –±—Ä–æ–Ω–∏ üë©‚Äçüíª")
        markup.add(item_open, item_bookings)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    cur.close()
    conn.close()


@bot.message_handler(func=lambda message: message.text == "–û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É üìî")
def open_library(message):
    conn = sqlite3.connect('library.sql')
    cur = conn.cursor()

    cur.execute("SELECT id,title, author FROM books")
    books = cur.fetchall()

    if books:
        book_list = ""
        for book in books:
            book_list += f"ID: {book[0]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {book[1]}\n–ê–≤—Ç–æ—Ä: {book[2]}\n\n"

        bot.send_message(message.chat.id, f"–í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–ª—è –≤–∞—Å!\n–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:\n{book_list}")
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≥–ª—è–Ω—É–ª–æ—Å—å —á—Ç–æ?\n –•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫—É—é-—Ç–æ –∫–Ω–∏–≥—É –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–µ—ë –±–æ–ª—å—à–µ? –ï—Å–ª–∏ –¥–∞, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä ID –Ω—É–∂–Ω–æ–π –∫–Ω–∏–≥–∏.")
    else:
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ —É –Ω–∞—Å –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –∫–Ω–∏–≥ :(")

    cur.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == "–í–∞—à–∏ –±—Ä–æ–Ω–∏ üë©‚Äçüíª")
def user_bookings(message):
    conn = sqlite3.connect('library.sql')
    cur = conn.cursor()

    cur.execute(
        "SELECT books.title, bookings.book_id, bookings.id FROM bookings JOIN books ON bookings.book_id = books.id WHERE user_id=?",
        (U,))
    user_bookings_info = cur.fetchall()

    if user_bookings_info:
        booking_list = "üë©‚Äçüíª –í–∞—à–∏ –±—Ä–æ–Ω–∏:\n"
        for book_info in user_bookings_info:
            booking_list += f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: {book_info[0]}\nID –∫–Ω–∏–≥–∏: {book_info[1]}\nID –±—Ä–æ–Ω–∏: {book_info[2]}\n\n"

        bot.send_message(message.chat.id, booking_list)
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏;)\n–£ –≤–∞—Å –ø–æ–∫–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")

    cur.close()
    conn.close()



@bot.message_handler(func=lambda message: True) # —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å id –∫–Ω–∏–≥–∏
def handle_book_id(message):

    global B  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è id –∫–Ω–∏–≥–∏

    conn = sqlite3.connect('library.sql')
    cur = conn.cursor()

    try:
        book_id = int(message.text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cur.execute("SELECT * FROM books WHERE id=?", (book_id,))
        book = cur.fetchone()

        if book:
            B = book_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∫–Ω–∏–≥–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π B
            bot.send_message(message.chat.id,
                             f"–≠—Ç–æ —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –≤–∞–º –ø–æ –¥—É—à–µ:\n   ID:  {book[0]}\n   –ù–∞–∑–≤–∞–Ω–∏–µ:  {book[1]}\n   –ê–≤—Ç–æ—Ä:  {book[2]}\n   –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è: {book[4]}\n   –û–ø–∏—Å–∞–Ω–∏–µ: {book[3]}\n   –ò–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ:  {book[5]}\n   –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫:  {book[7]}\n   –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:  {book[6]}")

            # –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–Ω–∏–≥–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_yes = types.KeyboardButton("–î–∞")
            item_no = types.KeyboardButton("–ù–µ—Ç")
            markup.add(item_yes, item_no)
            bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É?", reply_markup=markup)

            bot.register_next_step_handler(message, handle_book_booking) # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            bot.send_message(message.chat.id, "–ö–Ω–∏–≥–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :(")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞")

    cur.close()
    conn.close()


def handle_book_booking(message):
    if message.text.lower() == "–¥–∞":

        conn = sqlite3.connect('library.sql')
        cur = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ bookings
        cur.execute("INSERT INTO bookings (user_id, book_id) VALUES (?, ?)", (U, B))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º id —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±—Ä–æ–Ω–∏
        cur.execute("SELECT id FROM bookings WHERE user_id=? AND book_id=?", (U, B))
        booking_id = cur.fetchone()

        bot.send_message(message.chat.id, f"‚úèÔ∏è –£—Ä–∞!\n–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. ID –±—Ä–æ–Ω–∏: {booking_id[0]}\n–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–∏–¥–µ—Ç–µ –∫ –Ω–∞–º –∑–∞ –∫–Ω–∏–≥–æ–π)")

        cur.close()
        conn.close()

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_open = types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É üìî")
        item_bookings = types.KeyboardButton("–í–∞—à–∏ –±—Ä–æ–Ω–∏ üë©‚Äçüíª")
        markup.add(item_open, item_bookings)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


    elif message.text.lower() == "–Ω–µ—Ç":
        bot.send_message(message.chat.id, "–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ-—Ç–æ –µ—â–µ?")

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_open = types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É üìî")
        item_bookings = types.KeyboardButton("–í–∞—à–∏ –±—Ä–æ–Ω–∏ üë©‚Äçüíª")
        markup.add(item_open, item_bookings)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ‚úÖ '–î–∞' –∏–ª–∏ ‚ùå '–ù–µ—Ç'")



bot.polling(none_stop=True)

